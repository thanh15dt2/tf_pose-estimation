import argparse
import logging
import sys
import time

from tf_pose import common
import cv2
import numpy as np
import scipy.spatial.distance as dis
from tf_pose.estimator import TfPoseEstimator
from tf_pose.networks import get_graph_path, model_wh

logger = logging.getLogger('TfPoseEstimatorRun')
logger.handlers.clear()
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

class Scoring():
    def __init__(self, model='mobilenet_thin', resize='0x0', resize_out_ratio=4.0):
        
        self.model = model 
        self.resize = resize
        self.resize_out_ratio = resize_out_ratio
    
    def set_config(self, id_event):
        """id_event is number of event what is series of golf swing

        Args:
            id_event (int): number of events
        """
        if id_event==0:
            x_right = [0.4722222222222222, 0.5, 0.5055555555555555, 0.4666666666666667, 0.45555555555555555, 0.48333333333333334, 0.46111111111111114, 0.45, 0.5388888888888889, 0.55, 0.6055555555555555, 0.4777777777777778, 0.4888888888888889]
            y_right = [0.3388888888888889, 0.37222222222222223, 0.37222222222222223, 0.4166666666666667, 0.4, 0.5555555555555556, 0.6666666666666666, 0.7833333333333333, 0.5555555555555556, 0.6777777777777778, 0.7833333333333333, 0.3333333333333333, 0.3388888888888889]
        if id_event==1:
            x_right = [0.4888888888888889, 0.5166666666666667, 0.48333333333333334, 0.4388888888888889, 0.42777777777777776, 0.55, 0.5166666666666667, 0.45, 0.5, 0.5055555555555555, 0.45, 0.5611111111111111, 0.6055555555555555, 0.6111111111111112, 0.48333333333333334, 0.5, 0.5222222222222223]
            y_right = [0.40555555555555556, 0.4222222222222222, 0.43333333333333335, 0.4666666666666667, 0.4666666666666667, 0.42777777777777776, 0.4666666666666667, 0.4777777777777778, 0.5611111111111111, 0.6777777777777778, 0.7777777777777778, 0.5555555555555556, 0.6666666666666666, 0.7777777777777778, 0.4, 0.39444444444444443, 0.3888888888888889]
        if id_event==2:
            x_right = [0.4777777777777778, 0.49444444444444446, 0.5055555555555555, 0.4388888888888889, 0.37222222222222223, 0.4777777777777778, 0.45555555555555555, 0.45, 0.5333333333333333, 0.55, 0.6055555555555555, 0.4777777777777778, 0.48333333333333334, 0.4888888888888889]
            y_right = [0.3888888888888889, 0.4166666666666667, 0.4222222222222222, 0.4388888888888889, 0.42777777777777776, 0.5666666666666667, 0.6666666666666666, 0.7833333333333333, 0.5611111111111111, 0.6777777777777778, 0.7888888888888889, 0.37222222222222223, 0.37777777777777777, 0.38333333333333336]
        if id_event==3:
            x_right = [0.48333333333333334, 0.5, 0.46111111111111114, 0.4388888888888889, 0.38333333333333336, 0.5333333333333333, 0.5055555555555555, 0.45555555555555555, 0.4722222222222222, 0.45555555555555555, 0.45, 0.5333333333333333, 0.5611111111111111, 0.6055555555555555, 0.4777777777777778, 0.49444444444444446, 0.5222222222222223]
            y_right = [0.4, 0.4166666666666667, 0.4111111111111111, 0.4722222222222222, 0.5444444444444444, 0.42777777777777776, 0.4777777777777778, 0.5111111111111111, 0.5611111111111111, 0.6611111111111111, 0.7833333333333333, 0.5555555555555556, 0.6722222222222223, 0.7833333333333333, 0.38333333333333336, 0.3888888888888889, 0.38333333333333336]
        if id_event==4:
            x_right = [0.4888888888888889, 0.49444444444444446, 0.46111111111111114, 0.48333333333333334, 0.5388888888888889, 0.5333333333333333, 0.5611111111111111, 0.5666666666666667, 0.5111111111111111, 0.5722222222222222, 0.6055555555555555, 0.55, 0.5333333333333333, 0.46111111111111114, 0.4777777777777778, 0.49444444444444446, 0.4777777777777778, 0.5]
            y_right = [0.4, 0.40555555555555556, 0.42777777777777776, 0.49444444444444446, 0.5555555555555556, 0.39444444444444443, 0.4444444444444444, 0.5333333333333333, 0.5444444444444444, 0.6388888888888888, 0.7722222222222223, 0.5333333333333333, 0.6611111111111111, 0.7722222222222223, 0.39444444444444443, 0.38333333333333336, 0.39444444444444443, 0.37777777777777777]
        if id_event==5:
            x_right = [0.5055555555555555, 0.5277777777777778, 0.4777777777777778, 0.49444444444444446, 0.5277777777777778, 0.5722222222222222, 0.5611111111111111, 0.55, 0.5, 0.4777777777777778, 0.45555555555555555, 0.5611111111111111, 0.5833333333333334, 0.6055555555555555, 0.5, 0.5111111111111111, 0.4888888888888889, 0.5333333333333333]
            y_right = [0.4, 0.4166666666666667, 0.42777777777777776, 0.5, 0.5833333333333334, 0.4111111111111111, 0.49444444444444446, 0.5777777777777777, 0.5555555555555556, 0.6666666666666666, 0.7833333333333333, 0.5555555555555556, 0.6611111111111111, 0.7833333333333333, 0.39444444444444443, 0.3888888888888889, 0.3888888888888889, 0.37222222222222223]
        if id_event==6:
            x_right = [0.4722222222222222, 0.4777777777777778, 0.45555555555555555, 0.4777777777777778, 0.5666666666666667, 0.5, 0.5666666666666667, 0.6333333333333333, 0.5222222222222223, 0.5166666666666667, 0.45, 0.5722222222222222, 0.5833333333333334, 0.6055555555555555, 0.4777777777777778, 0.4722222222222222, 0.4722222222222222]
            y_right = [0.3888888888888889, 0.39444444444444443, 0.4111111111111111, 0.4722222222222222, 0.4777777777777778, 0.38333333333333336, 0.43333333333333335, 0.4722222222222222, 0.5444444444444444, 0.6555555555555556, 0.7722222222222223, 0.5333333333333333, 0.65, 0.7722222222222223, 0.38333333333333336, 0.3611111111111111, 0.3611111111111111]
        elif id_event==7:
            x_right = [0.5611111111111111, 0.6, 0.5222222222222223, 0.45555555555555555, 0.4777777777777778, 0.5888888888888889, 0.55, 0.4444444444444444, 0.5555555555555556, 0.5611111111111111, 0.5944444444444444, 0.5833333333333334, 0.5722222222222222, 0.5444444444444444]
            y_right = [0.37222222222222223, 0.37222222222222223, 0.37222222222222223, 0.38333333333333336, 0.3388888888888889, 0.5166666666666667, 0.6444444444444445, 0.7611111111111111, 0.5222222222222223, 0.65, 0.7722222222222223, 0.32222222222222224, 0.3277777777777778, 0.3333333333333333]
        return x_right, y_right


    def score(self, image, config):
        
        x_right, y_right = self.set_config(config)
        w, h = model_wh(self.resize)
        if w == 0 or h == 0:
            e = TfPoseEstimator(get_graph_path(self.model), target_size=(432, 368))
        else:
            e = TfPoseEstimator(get_graph_path(self.model), target_size=(w, h))
        # estimate human poses from a single image !
        image = common.read_img(image, None, None)
        if image is None:
            logger.error('Image can not be read, path=%s' % image)
            sys.exit(-1)
        t = time.time()
        humans = e.inference(image, resize_to_default=(w > 0 and h > 0), upsample_size=self.resize_out_ratio)
        elapsed = time.time() - t
        logger.info('inference image: %s in %.4f seconds.' % (image, elapsed))
        image, x_vector, y_vector = TfPoseEstimator.draw_humans(image, humans, imgcopy=False)
        # score

        return image, x_vector,  y_vector

